<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1 + 1 = 11</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://godpp.github.io/"/>
  <updated>2018-03-30T00:20:25.506Z</updated>
  <id>https://godpp.github.io/</id>
  
  <author>
    <name>Park Seong Jun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Seoullo IOS App</title>
    <link href="https://godpp.github.io/2018/03/25/Seoullo-IOS-App/"/>
    <id>https://godpp.github.io/2018/03/25/Seoullo-IOS-App/</id>
    <published>2018-03-24T15:10:23.000Z</published>
    <updated>2018-03-30T00:20:25.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서울로-관광-애플리케이션"><a href="#서울로-관광-애플리케이션" class="headerlink" title="서울로 관광 애플리케이션"></a>서울로 관광 애플리케이션</h2><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><p>많은 정보를 얻기 위해선 직접 검색을 하여 홈페이지에 들어가야 하는 번거로움을 없애고자 ‘서울로7017’에 대한 모든 관광 정보를 직관적으로 보여주고, 위치 기반 인증사진으로 서울로에 대한 커뮤니티를 구현한 애플리케이션.</p><h3 id="프로젝트-기간"><a href="#프로젝트-기간" class="headerlink" title="프로젝트 기간"></a>프로젝트 기간</h3><p>2017년 10월 1일 ~ 2017년 10월 31일 (1개월) - iPhone 4 개발</p><p>2017년 11월 21일 ~ 2017년 12월 5일 (2주) - iPhone X 개발</p><h3 id="프로젝트-등급"><a href="#프로젝트-등급" class="headerlink" title="프로젝트 등급"></a>프로젝트 등급</h3><p>2017 서울시 앱 공모전 출품 (알파테스트) , 현재 Server Off</p><h3 id="GitHub-Repository"><a href="#GitHub-Repository" class="headerlink" title="GitHub Repository"></a>GitHub Repository</h3><p><a href="https://github.com/godpp/seoullo_ios" target="_blank" rel="noopener">https://github.com/godpp/seoullo_ios</a></p><h3 id="워크플로우"><a href="#워크플로우" class="headerlink" title="워크플로우"></a>워크플로우</h3><p><img src="/image/서울로UI/seoullo_워크플로우.jpg" alt=""></p><h3 id="개발설명"><a href="#개발설명" class="headerlink" title="개발설명"></a>개발설명</h3><h4 id="로그인-화면"><a href="#로그인-화면" class="headerlink" title="로그인 화면"></a>로그인 화면</h4><p><img src="/image/서울로UI/서울로_로그인화면.jpg" alt=""></p><p>키보드가 올라왔을 때 아이디, 패스워드 입력 창이 가리지 않도록 CenterConstraintY를 Outlet으로 생성해 임의로 중심을 조정해 주었다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func keyboardWillShow(notification: NSNotification) &#123;</span><br><span class="line">    <span class="keyword">if</span> check &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">let</span> keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue &#123;</span><br><span class="line">            backCenterConstrainY.constant = -130</span><br><span class="line">            centerConstraintY.constant = 0</span><br><span class="line">            check = <span class="literal">false</span></span><br><span class="line">            view.layoutIfNeeded()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">func keyboardWillHide(notification: NSNotification) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">let</span> keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue &#123;</span><br><span class="line">        centerConstraintY.constant = 130</span><br><span class="line">        backCenterConstrainY.constant = 0</span><br><span class="line">        check = <span class="literal">true</span></span><br><span class="line">        view.layoutIfNeeded()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="메인화면"><a href="#메인화면" class="headerlink" title="메인화면"></a>메인화면</h4><p><img src="/image/서울로UI/서울로_메인화면.jpg" alt=""></p><p>SegmentedControl을 커스텀할 필요가 있었기 때문에, 동적으로 생성해 아래와 같은 코드로 커스텀하여 시설, 조경, 주요지점의 세 지도 이미지뷰로 분할하였다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">segmentedControl.backgroundColor = UIColor.white</span><br><span class="line">segmentedControl.tintColor = UIColor.clear</span><br><span class="line">segmentedControl.setTitle(<span class="string">"시설"</span>, forSegmentAt: 0)</span><br><span class="line">segmentedControl.setTitle(<span class="string">"조경"</span>, forSegmentAt: 1)</span><br><span class="line">segmentedControl.setTitle(<span class="string">"주요지점"</span>, forSegmentAt: 2)</span><br><span class="line">segmentedControl.setTitleTextAttributes([NSForegroundColorAttributeName : UIColor.white], <span class="keyword">for</span>: .selected)</span><br><span class="line">segmentedControl.setTitleTextAttributes([NSForegroundColorAttributeName : UIColor.init(red: 0/255.0, green: 157/255.0, blue: 76/255.0, alpha: 1.0)], <span class="keyword">for</span>: .normal)</span><br><span class="line">segmentedControl.setBackgroundImage(UIImage(named:<span class="string">"mypage_segment_white.png"</span>), <span class="keyword">for</span>: .normal, barMetrics: UIBarMetrics.default)</span><br><span class="line">segmentedControl.setBackgroundImage(UIImage(named: <span class="string">"mypage_segment_green.png"</span>), <span class="keyword">for</span>: .selected, barMetrics: UIBarMetrics.default)</span><br><span class="line">segmentedControl.frame = CGRect(x: 0, y: 245, width: 375, height: 44)</span><br></pre></td></tr></table></figure><p>지도이미지에서의 관광지 위치는 버튼처리를 하였는데, 다수의 불규칙적인 버튼 위치 때문에 정적으로 위치와 Constraint를 잡아주었다.</p><p>하단의 ‘서울로7017 시설랭킹’에는 실시간으로 사용자들의 시설 좋아요 순위를 반영해 누적된 좋아요 개수를 내림차순으로 정렬해 제일 높은 순위부터 3개를 이미지와 이름을 Label로 띄워주었다. 사각형 이미지의 둥근 원 처리는 아래와 같은 코드로 구현하였다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firstRankImg.clipsToBounds = <span class="literal">true</span></span><br><span class="line">firstRankImg.layer.cornerRadius = firstRankImg.frame.size.width / 2</span><br></pre></td></tr></table></figure><p>메인화면의 최하단에는 3개의 탭바로 구성되어있고, 좌측은 서울로에서 진행되는 프로그램을 보여주는 ‘서울로 정보’, 우측은 서울로7017의 이용자들이 직접 올리는 인증샷들을 한번에 보여주는 ‘#서울로’로 구성하였고, 중간에는 메인화면으로 돌아올수 있는 홈을 구성하였다. Xcode의 탭바 구성상 첫 화면은 맨 좌측탭으로 이동하기 마련인데 아래와 같은 코드로 첫 화면이 중간에 오게 구현 및 커스텀을 했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Main_Tab : UITabBarController&#123;</span><br><span class="line">    </span><br><span class="line">    @IBInspectable var defaultIndex: Int = 1</span><br><span class="line">    </span><br><span class="line">    override func <span class="function"><span class="title">viewDidLoad</span></span>() &#123;</span><br><span class="line">        </span><br><span class="line">        selectedIndex = defaultIndex</span><br><span class="line">        </span><br><span class="line">        UITabBar.appearance().barTintColor = UIColor.init(red: 255.0/255.0, green: 255.0/255.0, blue: 255.0/255.0, alpha: 0.0)</span><br><span class="line">        var tabBar = self.tabBar</span><br><span class="line">        </span><br><span class="line">        var mainImage = UIImage(named:<span class="string">"icon_home.png"</span>)?.withRenderingMode(.alwaysOriginal)</span><br><span class="line">        var infoImage = UIImage(named: <span class="string">"tabbar_information.png"</span>)?.withRenderingMode(.alwaysOriginal)</span><br><span class="line">        var hashImage = UIImage(named: <span class="string">"tabbar_camera.png"</span>)?.withRenderingMode(.alwaysOriginal)</span><br><span class="line">        </span><br><span class="line">        (tabBar.items![0] as! UITabBarItem).image = infoImage</span><br><span class="line">        (tabBar.items![1] as! UITabBarItem).image = mainImage</span><br><span class="line">        (tabBar.items![2] as! UITabBarItem).image = hashImage</span><br><span class="line">        (tabBar.items![0] as! UITabBarItem).selectedImage = infoImage</span><br><span class="line">        (tabBar.items![1] as! UITabBarItem).selectedImage = mainImage</span><br><span class="line">        (tabBar.items![2] as! UITabBarItem).selectedImage = hashImage</span><br><span class="line">        </span><br><span class="line">        (tabBar.items![0] as! UITabBarItem).index(ofAccessibilityElement: 0)</span><br><span class="line">        (tabBar.items![1] as! UITabBarItem).index(ofAccessibilityElement: 1)</span><br><span class="line">        (tabBar.items![2] as! UITabBarItem).index(ofAccessibilityElement: 2)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="관광지-정보-amp-후기-화면"><a href="#관광지-정보-amp-후기-화면" class="headerlink" title="관광지 정보 &amp; 후기 화면"></a>관광지 정보 &amp; 후기 화면</h4><p><img src="/image/서울로UI/서울로_관광지정보.jpg" alt=""></p><p>메인화면에서 지도이미지뷰 위의 관광지를 클릭하면 볼수있는 관광지 정보 화면이다. 중단 SegmentedControl을 이용해 정보, 후기로 뷰를 나누었고, 특히 후기 뷰는 Container View를 활용해 따로 뷰를 빼서 TableView를 구현하였다.</p><p>특히 후기탭에 후기 작성 버튼을 플로팅 버튼으로 만들어 쉽게 작성가능하도록 만들었으며, 후기 작성 뷰는 모달식으로 구성하였다.</p><p>후기 작성 뷰에서 사진을 업로드하면 ‘#서울로’ 탭바에 자동으로 모든 사용자의 사진이 모아진다.</p><h4 id="서울로-인증샷-모아보기"><a href="#서울로-인증샷-모아보기" class="headerlink" title="#서울로 인증샷 모아보기"></a>#서울로 인증샷 모아보기</h4><p><img src="/image/서울로UI/서울로_샵서울로.jpg" alt=""></p><p>후기 작성할때 관광지 인증샷을 올리면 모든 사용자의 인증사진을 모아보여줄 수 있는 #서울로 화면이다. (테스트용으로 후기사진을 업로드 하다보니…)</p><p>서버로 부터 사진의 id 값을 받아 뷰에 뿌려줄 때 Int.max와 같은 큰 값을 받아 갱신되는 사진들로 부터 최신 사진을 받을 수 있도록 네트워킹 구현을 했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var id = Int.max</span><br><span class="line"></span><br><span class="line">override func viewWillAppear(_ animated: Bool) &#123;</span><br><span class="line">    <span class="built_in">let</span> model = ProofShotModel(self)</span><br><span class="line">    model.proofshot(id: id)</span><br><span class="line">    </span><br><span class="line">    ProofCollecView.reloadData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="서울로-정보-이벤트-코스-프로그램"><a href="#서울로-정보-이벤트-코스-프로그램" class="headerlink" title="서울로 정보 (이벤트, 코스, 프로그램)"></a>서울로 정보 (이벤트, 코스, 프로그램)</h4><p><img src="/image/서울로UI/서울로_서울로정보.jpg" alt=""></p><p>현재 서울로7017에서 진행하고 있는 이벤드들과 코스 설명 및 프로그램 신청페이지를 웹과 연동해주는 화면이다.(저작권 관련 문제로 이 부분을 웹페이지 연동으로 대체했다.)</p><p>3개의 SegmentedControl을 커스텀해여 디자인했고, 이벤트탭과 도시관광코스탭은 Tableview로 구성하였다. 특히 이벤트 탭은 아래와 같은 section 메소드로 분할 구분 하였다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? &#123;</span><br><span class="line">    <span class="keyword">if</span> (0 == section)&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"진행중인 이벤트"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"지난 이벤트"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각각의 해당 버튼을 아래와 같은 URL 링크로 연결해주었다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@IBAction func whithsimin_Btn(_ sender: UIButton) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">let</span> url = URL(string: <span class="string">"http://seoullo7017.seoul.go.kr/SSF/H/ENJ/010/05010.do"</span>) &#123;</span><br><span class="line">        UIApplication.shared.openURL(url)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="마이페이지"><a href="#마이페이지" class="headerlink" title="마이페이지"></a>마이페이지</h4><p><img src="/image/서울로UI/서울로_마이페이지.jpg" alt=""></p><p>내가 쓴 후기와, 인증샷, 한줄 메시지 설정,프로필 사진 변경, 로그아웃이 가능한 마이페이지 화면이다.</p><p>‘나의 서울로’와 ‘내가 쓴 후기’는 SegmentedControl을 커스텀해 디자인하였고, ‘나의 서울로’는 Collectionview를 이용해 내가 올린 인증샷들을 한번에 볼수 있도록 하였다. ‘내가 쓴 후기’는 Tableview를 이용하였다.</p><p>한줄 메시지 편집은 view를 따로 만들어 CenterConstraintX를 임의 조정하는 방식(350 -&gt; 0)을 사용해 커스텀 팝업을 구현했다.</p><p>커스텀 팝업 레이아웃 코드이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">popupView.layer.cornerRadius = 10</span><br><span class="line">popupView.layer.masksToBounds = <span class="literal">true</span></span><br><span class="line">popupView.layer.shadowColor = UIColor.darkGray.cgColor</span><br><span class="line">popupView.layer.shadowRadius = 20</span><br><span class="line">popupView.layer.shadowOpacity = 1.0</span><br><span class="line">popupView.layer.shadowOffset = CGSize(width: 0, height: 0)</span><br></pre></td></tr></table></figure><p>커스텀 팝업 클릭시 CenterConstraintX 변경 코드이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@IBAction func introduceChange(_ sender: Any) &#123;</span><br><span class="line">    introChangeTxt.text = <span class="string">""</span></span><br><span class="line">    currentTxtLength.text = <span class="string">""</span></span><br><span class="line">    centerPopupConstraint.constant = 0</span><br><span class="line">    UIView.animate(withDuration: 0.2, animations: &#123;</span><br><span class="line">        self.view.layoutIfNeeded()</span><br><span class="line">        self.backgroundBtn.isHidden = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>커스텀 팝업 ‘취소’, ‘완료’시 CenterConstraintX 변경 코드이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func <span class="function"><span class="title">completeChange</span></span>() &#123;</span><br><span class="line">    <span class="built_in">let</span> text = introChangeTxt.text</span><br><span class="line">    <span class="built_in">let</span> model = MypageModel(self)</span><br><span class="line">    model.introduceChange(token: gsno(myToken), introduce: gsno(text))</span><br><span class="line">    centerPopupConstraint.constant = 350</span><br><span class="line">    UIView.animate(withDuration: 0.1, animations: &#123;</span><br><span class="line">        self.view.layoutIfNeeded()</span><br><span class="line">        self.backgroundBtn.isHidden = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@IBAction func closePopup(_ sender: Any) &#123;</span><br><span class="line">    centerPopupConstraint.constant = 350</span><br><span class="line">    UIView.animate(withDuration: 0.1, animations: &#123;</span><br><span class="line">        self.view.layoutIfNeeded()</span><br><span class="line">        self.backgroundBtn.isHidden = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>프로필 사진 변경은 extension 시킴으로써, imagepickerview가 모달식으로 뜨게 구현하였고, Alert창에서의 버튼 이벤트 클로저를 활용해 기본이미지 또는 사진첩 선택 이벤트를 구현하였다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@IBAction func profileChange(_ sender: Any) &#123;</span><br><span class="line">    <span class="built_in">let</span> alert = UIAlertController(title: <span class="string">"프로필 사진 변경"</span>, message: nil, preferredStyle: .actionSheet)</span><br><span class="line">    <span class="built_in">let</span> pickOnGallery = UIAlertAction(title: <span class="string">"앨범에서 사진 선택"</span>, style: .default)&#123;</span><br><span class="line">        (_) <span class="keyword">in</span></span><br><span class="line">        self.present(self.imagePicker, animated: <span class="literal">true</span>, completion: nil)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> changeDefault = UIAlertAction(title: <span class="string">"기본이미지로 변경"</span>, style: .default)&#123;</span><br><span class="line">        (_) <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">let</span> defaultImg = UIImage(named: <span class="string">"mypage_icon_profile"</span>)</span><br><span class="line">        self.profileImageView.image = defaultImg</span><br><span class="line">        <span class="built_in">let</span> model = MypageModel(self)</span><br><span class="line">        <span class="built_in">let</span> imageData = UIImageJPEGRepresentation(defaultImg!, 0.5)</span><br><span class="line">        model.profileChange(token: self.gsno(self.myToken), imageData: imageData)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> cancelAction = UIAlertAction(title: <span class="string">"취소"</span>, style: .cancel)</span><br><span class="line">    alert.addAction(pickOnGallery)</span><br><span class="line">    alert.addAction(changeDefault)</span><br><span class="line">    alert.addAction(cancelAction)</span><br><span class="line">    present(alert, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서울로-관광-애플리케이션&quot;&gt;&lt;a href=&quot;#서울로-관광-애플리케이션&quot; class=&quot;headerlink&quot; title=&quot;서울로 관광 애플리케이션&quot;&gt;&lt;/a&gt;서울로 관광 애플리케이션&lt;/h2&gt;&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; cla
      
    
    </summary>
    
      <category term="Project" scheme="https://godpp.github.io/categories/Project/"/>
    
    
      <category term="seoullo, ios, project, swift, app" scheme="https://godpp.github.io/tags/seoullo-ios-project-swift-app/"/>
    
  </entry>
  
  <entry>
    <title>Cyrano IOS App</title>
    <link href="https://godpp.github.io/2018/03/21/Cyrano%20IOS%20App/"/>
    <id>https://godpp.github.io/2018/03/21/Cyrano IOS App/</id>
    <published>2018-03-21T09:53:06.000Z</published>
    <updated>2018-03-30T01:10:51.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="연애상담애플리케이션"><a href="#연애상담애플리케이션" class="headerlink" title="연애상담애플리케이션"></a>연애상담애플리케이션</h2><h3 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h3><p> 연애고민에 특화된 전문적인 상담을 보다 쉽게 서비스하기 위해 기획한 애플리케이션</p><p> 유저들간 연애고민에 대해 이야기를 나누고 공감을 하는 간단한 커뮤니티를 뛰어넘어, 연애 상담 경험과 지식이 많은 전문가에게 상담을 받아 신뢰성 높은 연애고민상담이 이루어지는 연애 관련 애플리케이션입니다.</p><h3 id="프로젝트-기간"><a href="#프로젝트-기간" class="headerlink" title="프로젝트 기간"></a>프로젝트 기간</h3><p>2017년 6월 24일 ~ 2017년 7월 8일 (3주)</p><h3 id="프로젝트-등급"><a href="#프로젝트-등급" class="headerlink" title="프로젝트 등급"></a>프로젝트 등급</h3><p>알파테스트 (iPhone7) - 현재 안드로이드 버전 구글플레이 서비스중</p><h3 id="GitHub-Repository"><a href="#GitHub-Repository" class="headerlink" title="GitHub Repository"></a>GitHub Repository</h3><p><a href="https://github.com/godpp/cyrano_ios" target="_blank" rel="noopener">https://github.com/godpp/cyrano_ios</a></p><h3 id="워크플로우"><a href="#워크플로우" class="headerlink" title="워크플로우"></a>워크플로우</h3><p><img src="/image/cyrano_workflow.jpg" alt=""></p><h3 id="개발설명"><a href="#개발설명" class="headerlink" title="개발설명"></a>개발설명</h3><h4 id="스플래쉬-amp-로그인-화면"><a href="#스플래쉬-amp-로그인-화면" class="headerlink" title="스플래쉬 &amp; 로그인 화면"></a>스플래쉬 &amp; 로그인 화면</h4><p><img src="/image/시라노UI/시라노_스플_로그인.png" alt=""></p><p>스플래쉬 화면에서 이전에 로그인했을 때의 accountSequence를 회원가입때 ios CoreData에 저장했던 넘버와 비교를 통해 자동로그인을 구현하였다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">override func <span class="function"><span class="title">viewDidLoad</span></span>() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">let</span> accountSequence = self.ud.integer(forKey: <span class="string">"login_user_id"</span>)</span><br><span class="line">    <span class="built_in">let</span> diffAS = self.ud.integer(forKey: <span class="string">"join_user_id"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"어카운트시퀀스"</span>)</span><br><span class="line">    <span class="built_in">print</span>(accountSequence)</span><br><span class="line">    <span class="built_in">print</span>(diffAS)</span><br><span class="line">    </span><br><span class="line">    //2초뒤에 화면 전환 시켜줌</span><br><span class="line">    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+delayInSeconds)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> accountSequence == diffAS &#123;</span><br><span class="line">            //스토리보드 객체 생성</span><br><span class="line">            <span class="built_in">let</span> main_storyboard = UIStoryboard(name: <span class="string">"Main"</span>, bundle: nil)</span><br><span class="line">            //메인 뷰컨트롤러 접근</span><br><span class="line">            guard <span class="built_in">let</span> main = main_storyboard.instantiateViewController(withIdentifier: <span class="string">"Main_Tab"</span>) as? Main_Tab <span class="keyword">else</span> &#123;<span class="built_in">return</span>&#125;</span><br><span class="line">            self.present(main, animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">let</span> login_storyboard = UIStoryboard(name: <span class="string">"Login"</span>, bundle: nil)</span><br><span class="line">            guard <span class="built_in">let</span> login = login_storyboard.instantiateViewController(withIdentifier: <span class="string">"Login"</span>) as? Login <span class="keyword">else</span> &#123;<span class="built_in">return</span>&#125;</span><br><span class="line">            self.present(login, animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="회원가입"><a href="#회원가입" class="headerlink" title="회원가입"></a>회원가입</h4><p><img src="/image/시라노UI/시라노_회원가입.png" alt=""></p><p>회원가입은 총 3개의 뷰로 구성되며, 각각 페이지의 회원가입 정보들을 CoreData에 저장해 마지막 페이지에서 서버와 통신하게끔 구현하였다.</p><p>나이 상승,감소는 0~9까지의 이미지를 이용해 나이를 표현했는데, if문 분기를 통해 9에서 10의 자리로 넘어갈 때의 문제점을 해결하였다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var tensPlace : Int = 2     //십의자리</span><br><span class="line">var unitDigit : Int = 0     //일의자리</span><br><span class="line"></span><br><span class="line">//나이 상승버튼</span><br><span class="line">@IBAction func ageIncreaseListener(_ sender: Any) &#123;</span><br><span class="line">    <span class="keyword">if</span> unitDigit == 9 &amp;&amp; tensPlace == 9&#123;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> unitDigit == 9 &#123;</span><br><span class="line">        tensPlace += 1</span><br><span class="line">        unitDigit = 0</span><br><span class="line">        </span><br><span class="line">        tensPlaceImg.image = UIImage(named: <span class="string">"age_"</span>+String(tensPlace)+<span class="string">"0"</span>)!</span><br><span class="line">        unitPlaceImg.image = UIImage(named: <span class="string">"age_0"</span>)!</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        unitDigit += 1</span><br><span class="line">        unitPlaceImg.image = UIImage(named: <span class="string">"age_"</span>+String(unitDigit))!</span><br><span class="line">    &#125;</span><br><span class="line">    age = tensPlace*10 + unitDigit</span><br><span class="line">&#125;</span><br><span class="line">//나이 감소버튼</span><br><span class="line">@IBAction func ageDecreaseListener(_ sender: Any) &#123;</span><br><span class="line">    <span class="keyword">if</span> unitDigit == 0 &amp;&amp; tensPlace == 0  &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> unitDigit == 0 &#123;</span><br><span class="line">        tensPlace -= 1</span><br><span class="line">        unitDigit = 9</span><br><span class="line">        tensPlaceImg.image = UIImage(named: <span class="string">"age_"</span>+String(tensPlace)+<span class="string">"0"</span>)!</span><br><span class="line">        unitPlaceImg.image = UIImage(named: <span class="string">"age_9"</span>)!</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        unitDigit -= 1</span><br><span class="line">        unitPlaceImg.image = UIImage(named: <span class="string">"age_"</span>+String(unitDigit))!</span><br><span class="line">    &#125;</span><br><span class="line">    age = tensPlace*10 + unitDigit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="메인화면"><a href="#메인화면" class="headerlink" title="메인화면"></a>메인화면</h4><p><img src="/image/시라노UI/시라노_메인화면.png" alt=""></p><p>로그인 후 보게 되는 메인화면이다. (Simulator 캡처 화면은 실제 안드로이드 버전에서 등록한 상담글들 이다.)<br>NavigationController와 TabbarController를 root로 삼고, 뷰는 Tableview를 사용했다.</p><p>허나 많은 사용자들이 등록하는 상담글들을 Tableview에 모두 감당하기는 양이 너무 방대한 문제가 생겨, 뷰에 보이는 네개의 셀들만 뜨게 구현하였고, 초기에 Int.max 큰 값을 서버에 전송해 가장 최신글이 최상단에 오게 하였다. 또한 실시간으로 등록되는 앱의 특성상 아래로 뷰를 당겨 리로딩할 수 있게 구현하였다. 아래는 리로딩 코드이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    override func viewWillAppear(_ animated: Bool) &#123;</span><br><span class="line">        </span><br><span class="line">        mainTableView.delegate = self</span><br><span class="line">        mainTableView.dataSource = self</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">let</span> model = LoginModel(self)</span><br><span class="line">        </span><br><span class="line">        model.getMainArticleList(id : id)</span><br><span class="line">        </span><br><span class="line">         //테이블 뷰 아래로 리로딩</span><br><span class="line">        self.mainTableView.es_addInfiniteScrolling &#123;</span><br><span class="line">            [weak self] <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">let</span> model = LoginModel(self!)</span><br><span class="line">            model.getMainArticleList(id: (self?.gino(self?.id))!)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> ((self?.articleList.last) == nil)&#123;</span><br><span class="line">                self?.mainTableView.es_noticeNoMoreData()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                self?.mainTableView.es_stopLoadingMore()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        self.setTabBar()</span><br><span class="line">    </span><br><span class="line">        //셀이 비어있을때 테이블뷰 줄가있는거 없애기</span><br><span class="line">        mainTableView.tableFooterView = UIView.init(frame : CGRect.zero)</span><br><span class="line">    &#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">아래로 스크롤 할 때마다 articleList 배열에 연속적으로 추가 시켜 주어 다시 위로 스크롤 했을때, 최신글들이 보이게 서버 통신을 구현하였다.</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">    //통신 성공</span><br><span class="line">    func networkResult(resultData: Any, code: String) &#123;</span><br><span class="line">        <span class="keyword">if</span> code == <span class="string">"1"</span>&#123;</span><br><span class="line">            articleList += resultData as! [ArticleItemVO]</span><br><span class="line">            mainTableView.reloadData()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>상담글 버튼(+버튼)을 플로팅 버튼으로 만들어, 직관적으로 구현하였다. </p><p>메인화면에서 가장 어려웠던 부분은 하단 TabBar의 커스텀이였다. Xcode TabBar의 기본적인 tintcolor 때문에 이미지를 덮어씌워 디자인을 표현하는 것이 불가능 하였다, 그래서 UITabBarController을 상속받는 class를 만들어 barTintColor를 clear로 설정하고, withRenderingMode를 사용해 해결하였다. 아래에 코드이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Main_Tab : UITabBarController&#123;</span><br><span class="line">    override func <span class="function"><span class="title">viewDidLoad</span></span>() &#123;</span><br><span class="line">        UITabBar.appearance().barTintColor = UIColor.init(red: 27/255.0, green: 43/255.0, blue: 56/255.0, alpha: 0.0)</span><br><span class="line">        </span><br><span class="line">        var tabBar = self.tabBar</span><br><span class="line">        </span><br><span class="line">        var homeImage = UIImage(named:<span class="string">"tab_home_selection_last"</span>)?.withRenderingMode(.alwaysOriginal)</span><br><span class="line">        var mypageImg = UIImage(named: <span class="string">"tab_mypage_selection_last"</span>)?.withRenderingMode(.alwaysOriginal)</span><br><span class="line">        var notificationImg = UIImage(named: <span class="string">"tab_alram_selection_last"</span>)?.withRenderingMode(.alwaysOriginal)</span><br><span class="line">        </span><br><span class="line">        var settingImg = UIImage(named: <span class="string">"tab_setting_selection_last"</span>)?.withRenderingMode(.alwaysOriginal)</span><br><span class="line">        </span><br><span class="line">        (tabBar.items![0] as! UITabBarItem).selectedImage = homeImage</span><br><span class="line">        (tabBar.items![1] as! UITabBarItem).selectedImage = mypageImg</span><br><span class="line">        (tabBar.items![2] as! UITabBarItem).selectedImage = notificationImg</span><br><span class="line">        (tabBar.items![3] as! UITabBarItem).selectedImage = settingImg</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="상세고민"><a href="#상세고민" class="headerlink" title="상세고민"></a>상세고민</h4><p><img src="/image/시라노UI/시라노_상세고민.png" alt=""></p><p>메인화면에서 상담글을 클릭 시 볼 수 있는 상세고민 화면이다. 너무많은 객체가 들어가고 답변 작성자가 멘토일 때, 일반 사용자일 때등 다양한 경우의 수가 있어 객체들을 중첩해 만드는데 큰 어려움이 있었다. 초기에는 상단 상담글은 일반 뷰를 사용하고 하단 답변글은 Tableview를 사용했지만 Constraint가 제대로 잡히지 않는 치명적인 오류가 생겨, 전체뷰를 Tableview로 구성하고 상담글과 답변하기는 각각의 정적인 셀로 구성하고, 답변글은 동적인 셀로 구현하였습니다.</p><p>Tableview에서 글들의 길이가 항상 상이하기 때문에 셀 높이를 아래와 같은 코드로 동적으로 구현하였습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 테이블 셀 높이</span><br><span class="line">func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat &#123;</span><br><span class="line">    <span class="keyword">if</span>(indexPath.section == 0)&#123;</span><br><span class="line">        <span class="built_in">return</span> UITableViewAutomaticDimension</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (indexPath.section == 1)&#123;</span><br><span class="line">        <span class="built_in">return</span> 57</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (indexPath.section == 2)&#123;</span><br><span class="line">        <span class="built_in">return</span> UITableViewAutomaticDimension</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">return</span> UITableViewAutomaticDimension</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="답변쓰기"><a href="#답변쓰기" class="headerlink" title="답변쓰기"></a>답변쓰기</h4><p><img src="/image/시라노UI/시라노_답변쓰기.png" alt=""></p><p>답변글 작성 화면이다. Textview를 사용해 Placeholder 설정하는 부분에서 어려움을 겪었는데, KMPlaceholder 라이브러리를 사용하여 해결하였다.</p><p>답변하기 버튼을 누르면 서버와 통신하게 되고, 아래와 같은 Alert창으로 ok버튼에 클로저 이벤트를 부여함으로써, 작성화면을 빠져나오게 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func WriteAlert(title: String, msg: String) &#123;</span><br><span class="line">    <span class="built_in">let</span> alert = UIAlertController(title: title, message: msg, preferredStyle: .alert)</span><br><span class="line">    <span class="built_in">let</span> okAction = UIAlertAction(title: <span class="string">"확인"</span>, style: .default) &#123; (UIAlertAction) <span class="keyword">in</span></span><br><span class="line">        self.navigationController?.popViewController(animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    alert.addAction(okAction)</span><br><span class="line">    self.present(alert, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="공개-amp-비밀-고민작성"><a href="#공개-amp-비밀-고민작성" class="headerlink" title="공개 &amp; 비밀 고민작성"></a>공개 &amp; 비밀 고민작성</h4><p><img src="/image/시라노UI/시라노_고민작성.png" alt=""></p><h4 id="내가-쓴-상담"><a href="#내가-쓴-상담" class="headerlink" title="내가 쓴 상담"></a>내가 쓴 상담</h4><p><img src="/image/시라노UI/시라노_내가쓴상담.png" alt=""></p><h4 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h4><p><img src="/image/시라노UI/시라노_설정.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;연애상담애플리케이션&quot;&gt;&lt;a href=&quot;#연애상담애플리케이션&quot; class=&quot;headerlink&quot; title=&quot;연애상담애플리케이션&quot;&gt;&lt;/a&gt;연애상담애플리케이션&lt;/h2&gt;&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Project" scheme="https://godpp.github.io/categories/Project/"/>
    
    
      <category term="cyrano, ios, project, swift, app" scheme="https://godpp.github.io/tags/cyrano-ios-project-swift-app/"/>
    
  </entry>
  
  <entry>
    <title>About me</title>
    <link href="https://godpp.github.io/2018/03/21/Aboutme/"/>
    <id>https://godpp.github.io/2018/03/21/Aboutme/</id>
    <published>2018-03-21T09:46:10.606Z</published>
    <updated>2018-03-27T14:22:07.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="박성준-이란"><a href="#박성준-이란" class="headerlink" title="박성준 이란?"></a>박성준 이란?</h2><blockquote><p>1 + 1 = 11 의 Teamwork를 지향하는 개발자.</p></blockquote><p>IOS Application Development에 관심이 많고,<br>디자이너로 부터 가이드를 받아<br>Native UI를 완벽하게 만들어낼때 희열을 느낍니다.</p><p>인천대학교에서 컴퓨터공학을 전공중이며,<br>Teamwork에 대한 즐거움을 느껴<br>여러가지의 팀프로젝트를 진행중입니다.</p><p>다양한 협업의 관심으로부터 생겨날 수 있는<br>개발자로써의 새로운 가능성을 기대하며<br>하루하루 정진하고 있습니다.</p><h2 id="이력서"><a href="#이력서" class="headerlink" title="이력서"></a>이력서</h2><p><img src="/image/Career/이력서.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;박성준-이란&quot;&gt;&lt;a href=&quot;#박성준-이란&quot; class=&quot;headerlink&quot; title=&quot;박성준 이란?&quot;&gt;&lt;/a&gt;박성준 이란?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1 + 1 = 11 의 Teamwork를 지향하는 개발자.&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="About" scheme="https://godpp.github.io/categories/About/"/>
    
    
  </entry>
  
</feed>
